using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace CH.Alika.POS.Hardware
{
    public class MMMDocumentScanner : IDisposable
    {
        private MMM.Readers.Modules.Swipe.SwipeSettings swipeSettings;
        public event EventHandler OnCustomerDataRead;

        public void Initialize()
        {
            MMM.Readers.ErrorCode lErrorCode = MMM.Readers.ErrorCode.NO_ERROR_OCCURRED;

            // Initialise logging and error handling first. The error handler callback
            // will receive all error messages generated by the 3M Page Reader SDK
            MMM.Readers.Modules.Reader.SetErrorHandler(
                new MMM.Readers.ErrorDelegate(DeviceErrorHandler),
                IntPtr.Zero
            );
            lErrorCode = MMM.Readers.Modules.Reader.InitialiseLogging(
                true,
                3,
                -1,
                "SwipeReader.Net.log"
            );

            if (lErrorCode == MMM.Readers.ErrorCode.NO_ERROR_OCCURRED)
            {
                // Next load the settings for the Swipe Reader from the ini files. You can 
                // also modify and save settings back to the ini files using 
                // MMM.Readers.Modules.Reader.SaveSwipeSettings()
                lErrorCode = MMM.Readers.Modules.Reader.LoadSwipeSettings(
                    ref swipeSettings
                );
            }

            if (lErrorCode == MMM.Readers.ErrorCode.NO_ERROR_OCCURRED)
            {
                // Initialise the Swipe Reader. Data and events will be sent back in a 
                // non-blocking fashion through the callbacks provided
                //
                // Thread helper delegates are used to avoid thread-safety issues, 
                // particularly with .NET framework 2.0
                lErrorCode = MMM.Readers.Modules.Swipe.Initialise(
                    swipeSettings,
                    new MMM.Readers.Modules.Swipe.DataDelegate(DeviceDataHandler),
                    new MMM.Readers.FullPage.EventDelegate(DeviceEventHanlder)
                );
            }

            if (lErrorCode != MMM.Readers.ErrorCode.NO_ERROR_OCCURRED)
            {
                Console.WriteLine("!!! FAILED TO INITIALIZE DEVICE {0} {1}", (int)lErrorCode,lErrorCode.ToString());
            }
            else
            {
                // Display the hardware device and protocol in use
                string lProtocolName = new string(swipeSettings.Protocol.ProtocolName);

                if (lProtocolName.StartsWith("RTE"))
                {
                    // For RTE_INTERRUPT and RTE_POLLED modes, the Swipe Reader API can 
                    // automatically send Enable Device commands once finished reading so
                    // that you do not have to
                    if (
                        !lProtocolName.Equals("RTE_NATIVE") &&
                        swipeSettings.Protocol.RTE.AutoSendEnableDevice > 0
                    )
                    {
                        lProtocolName = string.Concat(
                            lProtocolName,
                            ", Auto Send Enable Command"
                        );
                    }

                    if (swipeSettings.Protocol.RTE.UseBCC > 0)
                    {
                        lProtocolName = string.Concat(
                            lProtocolName,
                            ", with BCC"
                        );
                    }
                    else
                    {
                        lProtocolName = string.Concat(
                            lProtocolName,
                            ", no BCC"
                        );
                    }
                }

                //labelHardwareProto.Text = string.Format(
                //    "{0}, Hardware: {1}",
                //    lProtocolName,
                //    swipeSettings.Hardware.DeviceType.ToString()
                //);
            }
            
        }

        private void DeviceErrorHandler(MMM.Readers.ErrorCode aErrorCode, string aErrorMessage)
        {
            Console.WriteLine("***READER ERROR***");
        }

        private void DeviceDataHandler(MMM.Readers.Modules.Swipe.SwipeItem aDataItem, object aData) 
        {
            Console.WriteLine("***READER DATA***");
            OnCustomerDataRead(this, EventArgs.Empty);
        }

        private void DeviceEventHanlder(MMM.Readers.FullPage.EventCode aEventType)
        {
            Console.WriteLine("***READER EVENT***");
        }

        void IDisposable.Dispose()
        {
            MMM.Readers.Modules.Swipe.Shutdown();
        }
    }
}
